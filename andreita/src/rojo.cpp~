#include <iostream>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "std_msgs/String.h"
#include <sstream> 
#include <ros/ros.h>

using namespace cv;
using namespace std;
ros::Publisher ver;
ros::Publisher mov;



 int main( int argc, char** argv )
 {

//char colores;

ros::init(argc, argv, "camara");
    /**
    * NodeHandle is the main access point to communications with the ROS system.
    * The first NodeHandle constructed will fully initialize this node, and the last
    * NodeHandle destructed will close down the node.
    */
    ros::NodeHandle nh;

 ver = nh.advertise<std_msgs::String>("/veo", 1000);
mov = nh.advertise<std_msgs::String>("/semueve", 1000);


    VideoCapture cap(0); //capture the video from webcam

    if ( !cap.isOpened() )  // if not success, exit program
    {
         cout << "Cannot open the web cam" << endl;
         return -1;
    }

//    namedWindow("DETECCION DEL COLOR AZUL", CV_WINDOW_AUTOSIZE); //create a window called "Control"
//azul  
 int iLowH = 160;
 int iHighH = 179;

  int iLowS = 100; 
 int iHighS = 255;

  int iLowV = 100;
 int iHighV = 255;
/*
switch (colores)
{
case 'rosado': iLowH=160; iLowS=100; iLowV=100; iHighH=179; iHighS=255; iHighV=255; break;
case 'naranja': iLowH=0; iLowS=100; iLowV=100; iHighH=10; iHighS=255; iHighV=255; break;
case 'verde': iLowH=49; iLowS=50; iLowV=50; iHighH=80; iHighS=255; iHighV=255; break;
case 'negro': iLowH=0; iLowS=0; iLowV=0; iHighH=12; iHighS=255; iHighV=255; break;
case 'amarillo': iLowH=15; iLowS=50; iLowV=50; iHighH=40; iHighS=255; iHighV=255; break;

}*/
			

  //Create trackbars in "Control" window
 createTrackbar("LowH", "Control", &iLowH, 179); //Hue (0 - 179)
 createTrackbar("HighH", "Control", &iHighH, 179);

  createTrackbar("LowS", "Control", &iLowS, 255); //Saturation (0 - 255)
 createTrackbar("HighS", "Control", &iHighS, 255);

  createTrackbar("LowV", "Control", &iLowV, 255);//Value (0 - 255)
 createTrackbar("HighV", "Control", &iHighV, 255);

int iLastX = -1; 
int iLastY = -1;

  //Capture a temporary image from the camera
 Mat imgTmp;
 cap.read(imgTmp); 

  //Create a black image with the size as the camera output
 Mat imgLines = Mat::zeros( imgTmp.size(), CV_8UC3 );;
 

    while (true)
    {
        Mat imgOriginal;

        bool bSuccess = cap.read(imgOriginal); // read a new frame from video



         if (!bSuccess) //if not success, break loop
        {
             cout << "Cannot read a frame from video stream" << endl;
             break;
        }

    Mat imgHSV;

   cvtColor(imgOriginal, imgHSV, COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV
 
  Mat imgThresholded;

   inRange(imgHSV, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), imgThresholded); //Threshold the image
      
  //morphological opening (removes small objects from the foreground)
  erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) );
  dilate( imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) ); 

   //morphological closing (removes small holes from the foreground)
  dilate( imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) ); 
  erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) );

   //Calculate the moments of the thresholded image
  Moments oMoments = moments(imgThresholded);

   double dM01 = oMoments.m01;
  double dM10 = oMoments.m10;
  double dArea = oMoments.m00;
	srand(time(0));


	ros::Rate rate(2);

   // if the area <= 10000, I consider that the there are no object in the image and it's because of the noise, the area is not zero 
  if (dArea > 10000)
  {
   //calculate the position of the ball
   int posX = dM10 / dArea;
   int posY = dM01 / dArea;        
        
   if (iLastX >= 0 && iLastY >= 0 && posX >= 0 && posY >= 0)
   {
    //Draw a red line from the previous point to the current point
    line(imgLines, Point(posX, posY), Point(iLastX, iLastY), Scalar(0,0,255), 2);


ROS_INFO_STREAM(posY);



std_msgs::String gi;
std::stringstream si;

if(posY>405)
{ si <<"no veo un color";
    gi.data = si.str();
mov.publish(gi); }


if(posX>=315 && posX<=380)
{ si <<"no";
    gi.data = si.str();
mov.publish(gi); }

if(posX>385)
{
//ROS_INFO_STREAM("izquierda");
    si <<"izquierda";
    gi.data = si.str();
mov.publish(gi);
}

if(posX<310)
{
//ROS_INFO_STREAM("derecha");
    si <<"derecha";
    gi.data = si.str();
mov.publish(gi);
}


/*
std_msgs::String msg;
std::stringstream ss;
ss<<"veo un color";
msg.data = ss.str();*/
//ROS_INFO_STREAM("veo un color");

//ver.publish(msg);

   }

    iLastX = posX;
   iLastY = posY;
  }
//aqui termina el dibujado del seguimiento
else { std_msgs::String st;

ROS_INFO_STREAM("NO VEO");
    std::stringstream sp;
    sp << "no veo un color";
    st.data = sp.str();
ver.publish(st);}



   imshow("Thresholded Image", imgThresholded); //show the thresholded image

   imgOriginal = imgOriginal + imgLines;
  imshow("Original", imgOriginal); //show the original image

        if (waitKey(30) == 27) //wait for 'esc' key press for 30ms. If 'esc' key is pressed, break loop
       {
            cout << "esc key is pressed by user" << endl;
            break; 
       }
    }

   return 0;
}
