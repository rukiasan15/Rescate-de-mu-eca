/*
 * Copyright (C) 2008, Morgan Quigley and Willow Garage, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the names of Stanford University or Willow Garage, Inc. nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// %Tag(FULLTEXT)%
#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sensor_msgs/PointCloud.h>
#include "ArExport.h"

using namespace std;

#define RANGE              (1024 / 2)
#define num_sensors        8


ros::Publisher xander;



void hola(const sensor_msgs::PointCloud::ConstPtr& msg)
{

 int i;
  
std_msgs::String op;

    std::stringstream lo;
 


  for(i=1;i<7;i++)
{
   float datax=msg->points[3].x;
   float datay=msg->points[i].y;

  
  ROS_INFO("%d X %f, Y %f",i,datax,datay);
    
if(datax<0.37) 
{lo <<"GO";
    op.data = lo.str();     }
if  (datax>=0.37)
{ lo <<"PAUSE";
op.data = lo.str(); }

xander.publish(op);
sleep(100);
   
}
}


int main(int argc, char **argv)
{
  
  ros::init(argc, argv, "sonar");

  ros::NodeHandle n;

  
  ros::Subscriber andy = n.subscribe("/RosAria/sonar", 1000, hola);

xander = n.advertise<std_msgs::String>("/wander", 1000);
  
ros::spin();


  return 0;
}

